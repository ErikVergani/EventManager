/**
 * Filename:    RegistrationController.java
 *
 * Description: Implementation of the RegistrationController class.
 *
 * Revision:    21 de abr. de 2024
 *
 * Author:      Erik Freire Vergani
 * EMail:       efvergani@hotmail.com.br
 *
 */

package com.univates.api.controllers;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.univates.api.records.request.RegistrationRecord;
import com.univates.api.security.Authenticator;
import com.univates.api.services.RegistrationService;

import jakarta.validation.Valid;

/**
 * @author ev
 */
@RestController
@RequestMapping( "/registration" )
public class RegistrationController
{
    @Autowired
    private RegistrationService registrationService;
    
    @Autowired
    private Authenticator authenticator;
    
    @PostMapping
    public ResponseEntity <Object> addRegistration( @RequestHeader String login, @RequestHeader String pass, @RequestBody @Valid RegistrationRecord rr )
    {
        if ( authenticator.authenticate( login, pass ) )
        {
            return registrationService.addRegistration( rr );
        }
        
        else
        {
            return ResponseEntity.status( HttpStatus.UNAUTHORIZED ).body( null );
        }
    }
    
    @GetMapping( "/{userId}" )
    public ResponseEntity <List<Object>> getUserRegistrations( @RequestHeader String login, @RequestHeader String pass, @PathVariable( value = "userId" ) Integer userId )
    {
        if ( authenticator.authenticate( login, pass ) )
        {
            return ResponseEntity.status( HttpStatus.OK ).body( registrationService.getRegistrations( userId ) );
        }
        
        else
        {
            return ResponseEntity.status( HttpStatus.UNAUTHORIZED ).body( null );
        }
    }
    
    @PostMapping( "/cancel" ) 
    ResponseEntity<Object> cancelRegistration( @RequestHeader String login, @RequestHeader String pass, @RequestParam( value = "eventId" ) Integer eventId, @RequestParam( value = "userId" ) Integer userId )
    {
        if ( authenticator.authenticate( login, pass ) )
        {
            return  registrationService.cancelRegistration( eventId, userId );
        }
        
        else
        {
            return ResponseEntity.status( HttpStatus.UNAUTHORIZED ).body( null );
        }
    }
    
    @PostMapping( "/checkin" ) 
    ResponseEntity <Object> checkIn( @RequestHeader String login, @RequestHeader String pass, @RequestParam( value = "eventId" ) Integer eventId, @RequestParam( value = "userId" ) Integer userId )
    {
        if ( authenticator.authenticate( login, pass ) )
        {
            return registrationService.checkIn( eventId, userId );
        }
        
        else
        {
            return ResponseEntity.status( HttpStatus.UNAUTHORIZED ).body( null );
        }
    }
}
