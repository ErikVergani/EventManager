/**
 * Filename:    EventController.java
 *
 * Description: Implementation of the EventController class.
 *
 * Revision:    20 de abr. de 2024
 *
 * Author:      Erik Freire Vergani
 * EMail:       efvergani@hotmail.com.br
 *
 */

package com.univates.api.controllers;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.univates.api.records.request.EventRecord;
import com.univates.api.security.Authenticator;
import com.univates.api.services.EventService;

import jakarta.validation.Valid;

/**
 * @author ev
 */
@RestController
@RequestMapping( "/event" )
public class EventController
{
    @Autowired
    EventService eventService;
    
    @Autowired
    Authenticator authenticator;
    
    @PostMapping
    public ResponseEntity<Object> addUser( @RequestHeader String login, @RequestHeader String pass, @RequestBody @Valid EventRecord er )
    {
        if ( authenticator.authenticate( login, pass ) )
        {
            return eventService.saveEvent( er );
        }
        
        else
        {
            return ResponseEntity.status( HttpStatus.UNAUTHORIZED ).body( "Wrong user or password" );
        }
    }
    
    @PutMapping( "/{id}" )
    public ResponseEntity<Object> updateEvent(  @RequestHeader String login, @RequestHeader String pass, @PathVariable( value = "id" ) Integer id, @RequestBody @Valid EventRecord er )
    {
        if ( authenticator.authenticate( login, pass ) )
        {
            return eventService.saveEvent( id, er );
        }
        
        else
        {
            return ResponseEntity.status( HttpStatus.UNAUTHORIZED ).body( "Unauthorized" );
        }
    }
    
    @GetMapping
    public ResponseEntity <List<Object>> getEvents()
    {
        return eventService.getAll();
    }
    
    @GetMapping( "/{id}" )
    public ResponseEntity <Object> getUserEvents(  @RequestHeader String login, @RequestHeader String pass, @PathVariable( value = "id" ) Integer id )
    {
        if ( authenticator.authenticate( login, pass ) )
        {
            return eventService.getUserEvents( id );
        }
        
        else
        {
            return ResponseEntity.status( HttpStatus.UNAUTHORIZED ).body( "Unauthorized" );
        }
    }
}
